// schema.prisma
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @unique @default(cuid())
  name          String?   @unique
  email         String    @unique
  emailVerified DateTime?
  password      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstName      String?
  lastName       String?
  bio            String?
  gender         String?
  dateOfBirth    DateTime?
  followingCount Int       @default(0)
  followerCount  Int       @default(0)
  profilePicture String?

  posts    Post[]
  comments Comments[]

  Followers Followers[]
  Following Following[]

  accounts Account[]
  Session  Session[]
  Event    Event[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  postId       String   @id @unique @default(cuid())
  body         String
  likeCount    Int      @default(0)
  commentCount Int      @default(0)
  image        String
  createdAt    DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  comments Comments[]
}

model Comments {
  commentId String   @id @unique @default(cuid())
  postedAt  DateTime
  body      String
  likeCount Int      @default(0)

  userId String
  User   User   @relation(fields: [userId], references: [id])

  postId String
  Post   Post?  @relation(fields: [postId], references: [postId])
}

model Followers {
  id                 String   @id @unique @default(cuid())
  startedFollowingAt DateTime @default(now())

  followingId String

  followerId String
  follower   User   @relation(fields: [followerId], references: [id])
}

model Following {
  id                 String   @id @unique @default(cuid())
  startedFollowingAt DateTime @default(now())

  followerId String

  followingId String
  following   User   @relation(fields: [followingId], references: [id])
}

model Event {
  id        String    @id @unique @default(cuid())
  name      String?
  location  String?
  date      DateTime?
  startTime DateTime?
  endTime   DateTime?
  image     String?
  details   String?
  createdAt DateTime  @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}
